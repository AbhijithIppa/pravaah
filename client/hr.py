import streamlit as st
from datetime import datetime
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain.chains import LLMChain
from langchain.memory import ConversationBufferMemory
from langchain_core.prompts import PromptTemplate
from langchain_openai import OpenAI
import streamlit as st
import os
from fpdf import FPDF

os.environ["OPENAI_API_KEY"]=os.getenv("OPENAI_API_KEY")
os.environ["LANGCHAIN_TRACING_V2"]="true"
os.environ["LANGCHAIN_API_KEY"]=os.getenv("LANGCHAIN_API_KEY")

# behav_arr=["","Tensorflow"]
# levels_arr=["basic","normal","hard"]
candidate_response=""
response=[]
memory = ConversationBufferMemory(memory_key="chat_history")
CNT=2
llm = OpenAI()

def hr_questions():
    
    template = """You are an expert recruiter conducting a HR interview for a software engineering position. MUST RETURN question:""
    Previous conversation:
    {chat_history}
    AI:"You must questions based on previous reply of user NOT technical ONLY behavourial questions. MUST RETURN question:""
    YOU SHOULD NOT REPEAT PREVIOUS QUESTIONS
    """

    prompt = PromptTemplate(
        input_variables=["chat_history", "HR"], template=template
    )
    llm_chain = LLMChain(
    llm=llm,
    prompt=prompt,
    verbose=True,
    memory=memory,
    )

    data=llm_chain({"HR":"behavourial and company culture"})
    response.append(data['text'])
    return data['text']


def load_messages():
    if 'messages' not in st.session_state:
        st.session_state['messages'] = []
        # Add initial AI message when no messages are present
        st.session_state['messages'].append({
            'username': "AI",
            'text': "I am your AI interviewer. Enter 'ready' to start the interview.",
   
            'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })

    return st.session_state['messages']

# Function to save a new message
def save_message(username, text):
    messages = load_messages()

    messages.append({'username': username, 'text': text,'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')})
    st.session_state['messages'] = messages

def save_transcript(chat_history):
# Chat history data
    data = chat_history

    class PDF(FPDF):
        def header(self):
            self.set_font('Arial', 'B', 12)
            self.cell(0, 10, 'Chat Transcript_HR', 0, 1, 'C')

        def footer(self):
            self.set_y(-15)
            self.set_font('Arial', 'I', 8)
            self.cell(0, 10, 'Page ' + str(self.page_no()), 0, 0, 'C')

    # Create instance of FPDF class
    pdf = PDF()

    # Add a page
    pdf.add_page()

    # Set title and author
    pdf.set_title('Chat Transcript')
    pdf.set_author('Generated by Python Script')

    # Add chat history
    pdf.set_font('Arial', '', 12)
    for line in data['chat_history'].split('\n'):
        pdf.cell(0, 10, line, 0, 1)

    # Save the pdf with name .pdf
    pdf.output('chat_transcript_HR.pdf')

    print("PDF created successfully!")


def main():
    st.set_page_config(page_title="Chat App", page_icon=":speech_balloon:")

    
    st.markdown("""
    <style>
        .main-title {
            font-size: 2.5rem;
            color: #FFA500;
            text-align: center;
            margin-bottom: 20px;
        }
        .sidebar .block-container {
            padding-top: 2rem;
        }
        .chat-message {
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 5px;
            background-color: #333333;
            color: white;
            display: flex;
            align-items: center;
        }
        .chat-message:hover {
            background-color: #2b2b2b;
        }
        .message-time {
            font-size: 0.8rem;
            color: #888;
            margin-left: auto;
        }
        .form-container {
            margin-top: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .form-container .css-1cpxqw2 {
            flex-grow: 1;
            margin-right: 10px;
        }
        .form-container .stButton button {
            width: 100%;
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px;
            border-radius: 5px;
            cursor: pointer;
        }
        .form-container .stButton button:hover {
            background-color: #45a049;
        }
    </style>
    """, unsafe_allow_html=True)

    st.markdown('<h1 class="main-title">AI Bot</h1>', unsafe_allow_html=True)

    # Sidebar for user information
    with st.sidebar:
        st.header("User Info")
        username = st.text_input("Username", key="username")
        if not username:
            st.warning("Please enter a username to join the chat")
            st.stop()

    st.header("Chat")
    if st.button("Submit", key="transcript_button"):
        # Get current chat messages
        messages = memory.load_memory_variables({})


        # Save transcript as PDF
        pdf_file_path = save_transcript(messages)

        # Provide a link to download the PDF
        # st.markdown(f"[Download Transcript PDF]({pdf_file_path})")

    # Display chat messages
    messages = load_messages()
    for message in messages:
        st.markdown(
            f"""
            <div class="chat-message">
                <div>
                    <strong>{message['username']}</strong>: {message['text']}
                </div>
                <div class="message-time">{message['time']}</div>
            </div>
            """, unsafe_allow_html=True)

    # Input form for new messages
    with st.form(key='message_form', clear_on_submit=True):
        st.markdown('<div class="form-container">', unsafe_allow_html=True)
        message_text = st.text_input("Your message")
        submit_button = st.form_submit_button(label='Send')
        st.markdown('</div>', unsafe_allow_html=True)

    if submit_button and message_text:
        global k
        # marks=similarity(candidate_response,response_ans[-1])
        save_message(st.session_state['username'], message_text)
        latest_user_message = message_text

        ai_question=hr_questions()

        # if(k==0):
        #     ai_question = get_ai_response("")
        # elif(k<2):
        #     ai_question = get_ai_response(latest_user_message)
        # else:
        #     ai_question = get_project_response(latest_user_message)

        print("AI Response is ",ai_question)
        save_message("AI", ai_question)
        st.experimental_rerun()



if __name__ == "__main__":
    main()